<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title>Plugins</title>
  
  <section>
    <title>What exactly is a plugin?</title>
    
    <para>A jQuery plugin is simply a new method that we use to extend jQuery's
    prototype object. By extending the prototype object you enable all jQuery
    objects to inherit any methods that you add. As established, whenever you
    call <code>jQuery()</code> you're creating a new jQuery object, with all of
    jQuery's methods inherited.</para>
    
    <para>The idea of a plugin is to do something with a collection of elements.
    You could consider each method that comes with the jQuery core a plugin,
    like <code>fadeOut</code> or <code>addClass</code>.</para>
    
    <para>You can make your own plugins and use them privately in your
    code or you can release them into the wild. There are thousands of jQuery
    plugins available online. The barrier to creating a plugin of your own
    is so low that you'll want to do it straight away!</para>
    
  </section>
  
  <section>
    <title>How to create a basic plugin</title>
    
    <para>The notation for creating a typical plugin is as follows:</para>
    
    <programlisting>(function($){
    $.fn.myNewPlugin = function() {
        return this.each(function(){
            // do something
        });
    };
}(jQuery));</programlisting>
    
    <para>Don't let that confuse you though. The point of a jQuery plugin is to
    extend jQuery's prototype object, and that's what's happening on this line:
    </para>
    
    <programlisting>$.fn.myNewPlugin = function() { //...</programlisting>
    
    <para>We wrap this assignment in an immediately-invoked function:</para>
    
    <programlisting>(function($){
    //...
}(jQuery));</programlisting>
    
    <para>This has the effect of creating a &quot;private&quot; scope that
    allows us to extend jQuery using the dollar symbol without having to risk
    the possibility that the dollar has been over-written by another library.
    </para>
    
    <para>So our actual plugin, thus far, is this:</para>
    
    <programlisting>$.fn.myNewPlugin = function() {
    return this.each(function(){
        // do something
    });
};</programlisting>
    
    <para>The <code>this</code> keyword within the new plugin refers to the
    jQuery object on which the plugin is being called.</para>
    
    <programlisting>var somejQueryObject = $('#something');

$.fn.myNewPlugin = function() {
    alert(this === somejQueryObject);
};

somejQueryObject.myNewPlugin(); // alerts 'true'</programlisting>
    
    <para>Your typical jQuery object will contain references to any number of
    DOM elements, and that's why jQuery objects are often referred to as
    collections.</para>
    
    <para>So, to do something with a collection we need to loop through it,
    which is most easily achieved using jQuery's <code>each()</code> method:
    </para>
    
    <programlisting>$.fn.myNewPlugin = function() {
    return this.each(function(){
    
    });
};</programlisting>
    
    <para>jQuery's <code>each()</code> method, like most other jQuery methods,
    returns a jQuery object, thus enabling what we've all come to know and love
    as 'chaining' (<code>$(...).css().attr()...</code>). We wouldn't want to
    break this convention so we return the <code>this</code> object. Within this
    loop you can do whatever you want with each element. Here's an example of a
    small plugin using some of the techniques we've discussed:</para>
    
    <programlisting>(function($){
    $.fn.showLinkLocation = function() {
        return this.filter('a').each(function(){
            $(this).append(
                ' (' + $(this).attr('href') + ')'
            );
        });
    };
}(jQuery));
    
// Usage example:
$('a').showLinkLocation();</programlisting>
    
    <para>This handy plugin goes through all anchors in the collection and
    appends the <code>href</code> attribute in brackets.</para>
    
    <programlisting>&lt;!-- Before plugin is called: --&gt;
&lt;a href=&quot;page.html&quot;&gt;Foo&lt;/a&gt;
    
&lt;!-- After plugin is called: --&gt;
&lt;a href=&quot;page.html&quot;&gt;Foo (page.html)&lt;/a&gt;</programlisting>
    
    <para>Our plugin can be optimised though:</para>
    
    <programlisting>(function($){
    $.fn.showLinkLocation = function() {
        return this.filter('a').append(function(){
              return ' (' + this.href + ')';
        });
    };
}(jQuery));</programlisting>
    
    <para>We're using the <code>append</code> method's capability to accept a
    callback, and the return value of that callback will determine what is
    appended to each element in the collection. Notice also that we're not
    using the <code>attr</code> method to retrieve the <code>href</code>
    attribute, because the native DOM API gives us easy access with the aptly
    named <code>href</code> property.</para>
    
    <para>Here's another example of a plugin. This one doesn't require us to
    loop through every elememt with the <code>each()</code> method. Instead,
    we're simply going to delegate to other jQuery methods directly:</para>
    
    <programlisting>(function($){
    $.fn.fadeInAndAddClass = function(duration, className) {
        return this.fadeIn(duration, function(){
            $(this).addClass(className);
        });
    };
}(jQuery));
    
// Usage example:
$('a').fadeInAndAddClass(400, 'finishedFading');</programlisting>
    
  </section>
    
  <section>
    <title>Finding &amp; Evaluating Plugins</title>

    <para>Plugins extend the basic jQuery functionality, and one of the most
    celebrated aspects of the library is its extensive plugin ecosystem. From
    table sorting to form validation to autocompletion ... if there’s a need
    for it, chances are good that someone has written a plugin for it.</para>

    <para>The quality of jQuery plugins varies widely. Many plugins are
    extensively tested and well-maintained, but others are hastily created and
    then ignored. More than a few fail to follow best practices.</para>

    <para>Google is your best initial resource for locating plugins, though
    the jQuery team is working on an improved plugin repository. Once you’ve
    identified some options via a Google search, you may want to consult the
    jQuery mailing list or the #jquery IRC channel to get input from
    others.</para>

    <para>When looking for a plugin to fill a need, do your homework. Ensure
    that the plugin is well-documented, and look for the author to provide
    lots of examples of its use. Be wary of plugins that do far more than you
    need; they can end up adding substantial overhead to your page. For more
    tips on spotting a subpar plugin, read <link
    xlink:href="http://remysharp.com/2010/06/03/signs-of-a-poorly-written-jquery-plugin/">Signs
    of a poorly written jQuery plugin</link> by Remy Sharp.</para>

    <para>Once you choose a plugin, you’ll need to add it to your page.
    Download the plugin, unzip it if necessary, place it your application’s
    directory structure, then include the plugin in your page using a script
    tag (after you include jQuery).</para>
  </section>

  <section>
    <title>Writing Plugins</title>

    <para>Sometimes you want to make a piece of functionality available
    throughout your code; for example, perhaps you want a single method you
    can call on a jQuery selection that performs a series of operations on the
    selection. In this case, you may want to write a plugin.</para>

    <para>Most plugins are simply methods created in the <code>$.fn</code>
    namespace. jQuery guarantees that a method called on a jQuery object will
    be able to access that jQuery object as <code>this</code> inside the
    method. In return, your plugin needs to guarantee that it returns the same
    object it received, unless explicitly documented otherwise.</para>

    <para>Here is an example of a simple plugin:</para>

    <example>
      <title>Creating a plugin to add and remove a class on hover</title>

      <programlisting>// defining the plugin
(function($){
    $.fn.hoverClass = function(c) {
        return this.hover(
            function() { $(this).toggleClass(c); }
        );
    };
}(jQuery);

// using the plugin
$('li').hoverClass('hover');</programlisting>
    </example>

    <para>For more on plugin development, read Mike Alsup's essential post,
    <link
    xlink:href="http://www.learningjquery.com/2007/10/a-plugin-development-pattern">A
    Plugin Development Pattern</link>. In it, he creates a plugin called
    <code>$.fn.hilight</code>, which provides support for the metadata plugin
    if it's present, and provides a centralized method for setting global and
    instance options for the plugin. </para>

    <example>
      <title>The Mike Alsup jQuery Plugin Development Pattern</title>

      <programlisting>//
// create closure
//
(function($) {
  //
  // plugin definition
  //
  $.fn.hilight = function(options) {
    debug(this);
    // build main options before element iteration
    var opts = $.extend({}, $.fn.hilight.defaults, options);
    // iterate and reformat each matched element
    return this.each(function() {
      $this = $(this);
      // build element specific options
      var o = $.meta ? $.extend({}, opts, $this.data()) : opts;
      // update element styles
      $this.css({
        backgroundColor: o.background,
        color: o.foreground
      });
      var markup = $this.html();
      // call our format function
      markup = $.fn.hilight.format(markup);
      $this.html(markup);
    });
  };
  //
  // private function for debugging
  //
  function debug($obj) {
    if (window.console &amp;&amp; window.console.log)
      window.console.log('hilight selection count: ' + $obj.size());
  };
  //
  // define and expose our format function
  //
  $.fn.hilight.format = function(txt) {
    return '&lt;strong&gt;' + txt + '&lt;/strong&gt;';
  };
  //
  // plugin defaults
  //
  $.fn.hilight.defaults = {
    foreground: 'red',
    background: 'yellow'
  };
//
// end of closure
//
})(jQuery);</programlisting>
    </example>
  </section>

  <section>
    <title>Exercises</title>

    <xi:include href="exercises/sortable-plugin.xml" xpointer="element(/1)" />

    <xi:include href="exercises/striping-plugin.xml" xpointer="element(/1)" />
  </section>
</chapter>
