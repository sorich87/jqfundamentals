<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title>Events</title>

  <section>
    <title>Overview</title>

    <para>jQuery provides simple methods for attaching event handlers to
    selections. When an event occurs, the provided function is executed.
    Inside the function, this refers to the element that was clicked.</para>

    <para>For details on jQuery events, visit <link
    xlink:href="http://api.jquery.com/category/events/">http://api.jquery.com/category/events/</link>.</para>

    <para>The event handling function can receive an event object. This object
    can be used to determine the nature of the event, and to prevent the
    eventâ€™s default behavior.</para>

    <para>For details on the event object, visit <link
    xlink:href="http://api.jquery.com/category/events/event-object/">http://api.jquery.com/category/events/event-object/</link>.</para>
  </section>

  <section>
    <title>Connecting Events to Elements</title>

    <para>jQuery offers convenience methods for most common events, and these
    are the methods you will see used most often. These methods -- including
    <code>$.fn.click</code>, <code>$.fn.focus</code>, <code>$.fn.blur</code>,
    <code>$.fn.change</code>, etc. -- are shorthand for jQuery's
    <code>$.fn.bind</code> method. The bind method is useful for binding the
    same hadler function to multiple events, and is also used when you want to
    provide data to the event hander, or when you are working with custom
    events.</para>

    <example>
      <title>Event binding using a convenience method</title>

      <programlisting>$('p').click(function() {
    console.log('click');
});</programlisting>
    </example>

    <example>
      <title>Event biding using the <code>$.fn.bind</code> method</title>

      <programlisting>$('p').bind('click', function() {
    console.log('click');
});</programlisting>
    </example>

    <example>
      <title>Event binding using the <code>$.fn.bind</code> method with
      data</title>

      <para><programlisting>$('input').bind(
    'click change',  // bind to multiple events
    { foo : 'bar' }, // pass in data

    function(eventObject) {
        console.log(eventObject.type, eventObject.data);
        // logs event type, then { foo : 'bar' }
    }
);</programlisting></para>
    </example>

    <section>
      <title>Connecting Events to Run Only Once</title>

      <para>Sometimes you need a particular handler to run only once -- after
      that, you may want no handler to run, or you may want a different
      handler to run. jQuery provides the <code>$.fn.one</code> method for
      this purpose.</para>

      <example>
        <title>Switching handlers using the <code>$.fn.one</code>
        method</title>

        <programlisting>$('p').one('click', function() {
    $(this).click(function() { console.log('You clicked this before!'); });
});</programlisting>
      </example>

      <para>The <code>$.fn.one</code> method is especially useful if you need
      to do some complicated setup the first time an element is clicked, but
      not subsequent times.</para>
    </section>

    <section>
      <title>Disconnecting Events</title>

      <para>To disconnect an event handler, you use the
      <code>$.fn.unbind</code> method and pass in the event type to unbind. If
      you attached a named function to the event, then you can isolate the
      unbinding to that named function by passing it as the second
      argument.</para>

      <example>
        <title>Unbinding all click handlers on a selection</title>

        <para><programlisting>$('p').unbind('click');</programlisting></para>
      </example>

      <example>
        <title>Unbinding a particular click handler</title>

        <programlisting>var foo = function() { console.log('foo'); };
var bar = function() { console.log('bar'); };

$('p').bind('click', foo).bind('click', bar);
$('p').unbind('click', bar); // foo is still bound to the click event</programlisting>
      </example>
    </section>

    <section>
      <title>Namespacing Events</title>

      <para>For complex applications and for plugins you share with others, it
      can be useful to namespace your events so you don't unintentionally
      disconnect events that you didn't or couldn't know about.</para>

      <example>
        <title>Namespacing events</title>

        <programlisting>$('p').bind('click.myNamespace', function() { /* ... */ });
$('p').unbind('click.myNamespace');
$('p').unbind('.myNamespace'); // unbind all events in the namespace</programlisting>
      </example>
    </section>
  </section>

  <section>
    <title>Inside the Event Handling Function</title>

    <para>As mentioned in the overview, the event handling function receives
    an event object, which contains many properties and methods. The event
    object is most commonly used to prevent the default action of the event
    via the preventDefault method. However, the event object contains a number
    of other useful properties and methods, including:</para>

    <variablelist>
      <varlistentry>
        <term>pageX, pageY</term>

        <listitem>
          <para>The mouse position at the time the event occurred, relative to
          the top left of the page.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>type</term>

        <listitem>
          <para>The type of the event (e.g. "click").</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>which</term>

        <listitem>
          <para>The button or key that was pressed.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>data</term>

        <listitem>
          <para>Any data that was passed in when the event was bound.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>target</term>

        <listitem>
          <para>The DOM element that initiated the event.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>preventDefault()</term>

        <listitem>
          <para>Prevent the default action of the event (e.g. following a
          link).</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>stopPropagation()</term>

        <listitem>
          <para>Stop the event from bubbling up to other elements.</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>In addition to the event object, the event handling function also
    has access to the DOM element that the handler was bound to via the
    keyword <code>this</code>. To turn the DOM element into a jQuery object
    that we can use jQuery methods on, we simply do <code>$(this)</code>,
    often following this idiom:</para>

    <programlisting>var $this = $(this);</programlisting>

    <example>
      <title>Preventing a link from being followed</title>

      <programlisting>$('a').click(function(e) {
    var $this = $(this);
    if ($this.attr('href').match('evil')) {
        e.preventDefault();
        $this.addClass('evil');
    }
});</programlisting>
    </example>
  </section>

  <section>
    <title>Triggering Event Handlers</title>

    <para>jQuery provides a way to trigger the event handlers bound to an
    element without any user interaction via the <code>$.fn.trigger</code>
    method. While this method has its uses, it should not be used simply to
    call a function that was bound as a click handler. Instead, you should
    store the function you want to call in a variable, and pass the variable
    name when you do your binding. Then, you can call the function itself
    whenever you want, without the need for <code>$.fn.trigger</code>.</para>

    <example>
      <title>Triggering an event handler the right way</title>

      <programlisting>var foo = function(e) { 
    if (e) { 
        console.log(e); 
    } else {
        console.log('this didn\'t come from an event!');
    }
};


$('p').click(foo); 

foo(); // instead of $('p').trigger('click')</programlisting>
    </example>
  </section>

  <section>
    <title>Increasing Performance with Event Delegation</title>

    <para>You'll frequently use jQuery to add new elements to the page, and
    when you do, you may need to bind events to those new elements -- events
    you already bound to similar elements that were on the page originally.
    Instead of repeating your event binding every time you add elements to the
    page, you can use event delegation. With event delegation, you bind your
    event to a container element, and then when the event occurs, you look to
    see which contained element it occurred on. If this sounds complicated,
    luckily jQuery makes it easy with its <code>$.fn.live</code> and
    <code>$.fn.delegate</code> methods.</para>

    <para>While most people discover event delegation while dealing with
    elements added to the page later, it has some performance benefits even if
    you never add more elements to the page. The time required to bind event
    handlers to hundreds of individual elements is non-trivial; if you have a
    large set of elements, you should consider delegating related events to a
    container element.</para>

    <note>
      <para>The <code>$.fn.live</code> method was introduced in jQuery 1.3,
      and at that time only certain event types were supported. As of jQuery
      1.4.2, the <code>$.fn.delegate</code> method is available, and is the
      preferred method.</para>
    </note>

    <example>
      <title>Event delegation using <code>$.fn.delegate</code></title>

      <programlisting>$('#myUnorderedList').delegate('li', 'click', function(e) {
    var $myListItem = $(this);
    // ...
});</programlisting>
    </example>

    <example>
      <title>Event delegation using <code>$.fn.live</code></title>

      <programlisting>$('#myUnorderedList li').live('click', function(e) {
    var $myListItem = $(this);
    // ...
});</programlisting>
    </example>

    <section>
      <title>Unbinding Delegated Events</title>

      <para>If you need to remove delegated events, you can't simply unbind
      them. Instead, use <code>$.fn.undelegate</code> for events connected
      with <code>$.fn.delegate</code>, and <code>$.fn.die</code> for events
      connected with <code>$.fn.live</code>. As with bind, you can optionally
      pass in the name of the bound function.</para>

      <example>
        <title>Unbinding delegated events</title>

        <programlisting>$('#myUnorderedList').undelegate('li', 'click');
$('#myUnorderedList li').die('click');</programlisting>
      </example>
    </section>
  </section>

  <section>
    <title>Event Helpers</title>

    <para>jQuery offers two event-related helper functions that save you a few
    keystrokes.</para>

    <section>
      <title><code>$.fn.hover</code></title>

      <para>The <code>$.fn.hover</code> method lets you pass one or two
      functions to be run when the <code>mouseenter</code> and
      <code>mouseleave</code> events occur on an element. If you pass one
      function, it will be run for both events; if you pass two functions, the
      first will run for <code>mouseenter</code>, and the second will run for
      <code>mouseleave</code>.</para>

      <note>
        <para>Prior to jQuery 1.4, the <code>$.fn.hover</code> method required
        two functions.</para>
      </note>

      <example>
        <title>The hover helper function</title>

        <programlisting>$('#menu li').hover(function() { 
    $(this).toggleClass('hover'); 
});</programlisting>
      </example>
    </section>

    <section>
      <title><code>$.fn.toggle</code></title>

      <para>Much like <code>$.fn.hover</code>, the <code>$.fn.toggle</code>
      method receives two or more functions; each time the event occurs, the
      next function in the list is called. Generally, <code>$.fn.toggle</code>
      is used with just two functions, but technically you can use as many as
      you'd like.</para>

      <example>
        <title>The toggle helper function</title>

        <programlisting>$('p.expander').toggle(
    function() {
        $(this).prev().addClass('open');
    },
    function() {
        $(this).prev().removeClass('open');
    }
);</programlisting>
      </example>
    </section>
  </section>

  <section>
    <title>Exercises</title>

    <xi:include href="exercises/input-hint.xml" xpointer="element(/1)" />

    <xi:include href="exercises/tabbed-navigation.xml" xpointer="element(/1)" />
  </section>
</chapter>
