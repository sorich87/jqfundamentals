<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title>Code Organization</title>

  <section>
    <title>Overview</title>

    <para>When you move beyond adding simple enhancements to your website with
    jQuery and start developing full-blown client-side applications, you need
    to consider how to organize your code. In this chapter, we'll take a look
    at various code organization patterns you can use in your jQuery
    application and explore why code organization is important.</para>

    <section>
      <title>Key Concepts</title>

      <para>Before we jump into code organization patterns, it's important to
      understand some concepts that are common to all good code organization
      patterns.</para>

      <itemizedlist>
        <listitem>
          <para>Your code should be divided into units of functionality —
          modules, services, etc. Avoid the temptation to have all of your
          code in one huge $(document).ready() block.</para>
        </listitem>

        <listitem>
          <para>Despite jQuery's DOM-centric nature, JavaScript applications
          are not all about the DOM. Remember that not all pieces of
          functionality need to — or should — have a DOM
          representation.</para>
        </listitem>

        <listitem>
          <para>Units of functionality should be <link
          xlink:href="http://en.wikipedia.org/wiki/Loose_coupling">loosely
          coupled</link> — a unit of functionality should be able to exist on
          its own, and communication between units should be handled via a
          messaging system such as custom events or pub/sub. Stay away from
          direct communication between units of functionality whenever
          possible. </para>
        </listitem>

        <listitem>
          <para>Units of functionality should be divided into small methods
          that do exactly one thing. If your methods are more than a few lines
          long, you may need to consider refactoring.</para>
        </listitem>

        <listitem>
          <para>Configuration options for your units of functionality — URLs,
          strings, timeouts, etc. — should be set in properties or a
          configuration object, not scattered throughout the code.</para>
        </listitem>
      </itemizedlist>

      <para>The concept of loose coupling can be especially troublesome to
      developers making their first foray into complex applications, so be
      mindful of this as you're getting started.</para>
    </section>
  </section>

  <section>
    <title>Organizational Structures</title>

    <para>There are several ways </para>

    <section>
      <title>The Object Literal</title>

      <para>An object literal is perhaps the simplest way to organize your
      code. It doesn't offer any of the many features provided by other
      techniques, but it's a good starting point for discussion.</para>

      <example>
        <title>An object literal</title>

        <programlisting>var myFeature = {
    myProperty : 'hello',

    myMethod : function() {
        console.log(myFeature.myProperty);
    },

    init : function(settings) {
        myFeature.settings = settings;
    },

    readSettings : function() {
        console.log(myFeature.settings);
    }
};

myFeature.myProperty; // 'hello'
myFeature.myMethod(); // logs 'hello'
myFeature.init({ foo : 'bar' });
myFeature.readSettings(); // logs { foo : 'bar' }
</programlisting>
      </example>

      <para>The object literal above is simply an object assigned to a
      variable. The object has one property and several methods. All of the
      properties and methods are public, so any part of your application can
      see the properties and call methods on the object. While there is an
      init method, there's nothing requiring that it be called before the
      object is functional. </para>

      <para>How would we apply this pattern to jQuery code? Let's say that we
      had this code written in the traditional jQuery style:</para>

      <programlisting>// clicking on a list item loads some content
// using the list item's ID and hides content
// in sibling list items
$(document).ready(function() {
  $('#myFeature li')
    .append('&lt;div/&gt;')
    .click(function() {
      var $this = $(this);
      var $div = $this.find('div');
      $div.load('foo.php?item=' +
        $this.attr('id'), 
        function() {
          $div.show();
          $this.siblings()
            .find('div').hide();
        }
      );
    });
});
</programlisting>

      <para>Se isso for extender nossa aplicação, deixar como está pode ser
      legal. Por outro lado, se esse for um pedaço de uma aplicação maior,
      nós temos que manter esta funcionalidade separada da funcionalidade
      não relacionada. Talvez nós ainda queiramos mover a URL pra fora do 
      código e dentro de uma área de configuração. Por último, nós talvez
      precisaremos quebrar o encadeamento de métodos para ficar mais fácil
      modificar pedaços de funcionalidade depois. </para>

      <example>
        <title>Usando um literal de objeto para uma feature do jQuery</title>

        <programlisting>var myFeature = {
    init : function(settings) {
        myFeature.config = {
            $items : $('#myFeature li'),
            $container : $('&lt;div class="container"&gt;&lt;/div&gt;'),
            urlBase : '/foo.php?item='
        };

        // permite a sobreposição da da configuração padrão
        $.extend(myFeature.config, settings);

        myFeature.setup();        
    },

    setup : function() {
        myFeature.config.$items
            .each(myFeature.createContainer)
            .click(myFeature.showItem);
    },

    createContainer : function() {
        var $i = $(this),
            $c = myFeature.config.$container.clone()
                     .appendTo($i);

        $i.data('container', $c);
    },
    
    buildUrl : function() {
        return myFeature.config.urlBase + 
               myFeature.$currentItem.attr('id');
    },
    
    showItem : function() {
        var myFeature.$currentItem = $(this);
        myFeature.getContent(myFeature.showContent);
    },
    
    getContent : function(callback) {
        var url = myFeature.buildUrl();
        myFeature.$currentItem
            .data('container').load(url, callback);
    },
    
    showContent : function() {
        myFeature.$currentItem
            .data('container').show();
        myFeature.hideContent();
    },
    
    hideContent : function() {
        myFeature.$currentItem.siblings()
            .each(function() { 
                $(this).data('container').hide(); 
            });
    }
};

$(document).ready(myFeature.init);</programlisting>
      </example>

      <para>A primeira coisa que você irá perceber é que esta abordagem 
      é obviamente muito maior que a original - novamente, se isso for 
      extender nossa aplicação, o uso do literal objeto não irá fazer 
      sentido algum. Embora assumindo que não vai extender nossa aplicação,
      nós ganhamos várias coisas:</para>

      <itemizedlist>
        <listitem>
          <para>Nós quebramos nossas funcionalidaes em métodos pequenos;
          no futuro, se nós precisarmos mudar como o conteúdo é mostrado,
          é claro onde nós iremos mudar. No código original, este passo é
          muito mais difícil para se localizar.</para>
        </listitem>

        <listitem>
          <para>Nós movemos as as opções de configuração para fora do 
          corpo do código e colocamos em uma localização central.</para>
        </listitem>

        <listitem>
          <para>Nós eliminamos as restrições do encadeamento, fazendo o
          código mais refatorável, modificável e rearranjável.</para>
        </listitem>
      </itemizedlist>

      <para>Para funcionalidades não triviais, literais de objeto são uma 
      clara melhora sobre o longo pedaço de código dentro do bloco 
      $(document).ready(), de forma nos leva a pensar sobre pedaços de 
      funcionalidade. Entretanto, eles não são muito mais avançados do
      que ter um monte de declarações de funções dentro do bloco 
      $(document).ready(). </para>
    </section>

    <section>
      <title>O Module Pattern</title>

      <example>
        <title>The module pattern</title>

        <programlisting>var featureCreator = function() {
    var privateThing = 'secret',
        publicThing = 'not secret',

        changePrivateThing = function() {
            privateThing = 'super secret';
        },

        sayPrivateThing = function() {
            console.log(privateThing);
            changePrivateThing();
        };

    return {
        publicThing : publicThing,
        sayPrivateThing : sayPrivateThing
    }
};

var feature = featureCreator();
feature.publicThing; // 'not secret'
feature.sayPrivateThing(); 
// logs 'secret' and changes the value
// of privateThing</programlisting>
      </example>

      <para>In the example above, we create a function featureCreator that
      returns an object. Inside of the function, we define some variables.
      Because the variables are defined inside of the function, we don't have
      access to them outside of the function unless we put them in the return
      object. This means that no code outside of the function has access to
      the privateThing variable or to the changePrivateThing function.
      However, sayPrivateThing does have access to privateThing and
      changePrivateThing, because both were defined in the same scope as
      sayPrivateThing.</para>

      <para>This pattern is powerful because, as you can gather from the
      variable names, it can give you private variables and functions while
      exposing a limited API consisting of the returned object's properties
      and methods.</para>

      <example>
        <title>Using the module pattern for a jQuery feature</title>

        <programlisting>$(document).ready(function() {
    var myFeature = (function() {
        
        var $items = $('#myFeature li'),
            $container = $('&lt;div class="container"&gt;&lt;/div&gt;'),
            $currentItem,

            urlBase = '/foo.php?item=',
            
            createContainer = function() {
                var $i = $(this),
                    $c = $container.clone().appendTo($i);

                $i.data('container', $c);
            },
            
            buildUrl = function() {
                return urlBase + $currentItem.attr('id');
            },
            
            showItem = function() {
                var $currentItem = $(this);
                getContent(showContent);
            },
            
            showItemByIndex = function(idx) {
                $.proxy(showItem, $items.get(idx));
            },
            
            getContent = function(callback) {
                $currentItem.data('container').load(buildUrl(), callback);
            },
            
            showContent = function() {
                $currentItem.data('container').show();
                hideContent();
            },
            
            hideContent = function() {
                $currentItem.siblings()
                    .each(function() { 
                        $(this).data('container').hide(); 
                });
            };

        config.$items
            .each(createContainer)
            .click(showItem);
            
        return { showItemByIndex : showItemByIndex };
    })();
    
    myFeature.showItemByIndex(0);
});</programlisting>
      </example>
    </section>

    <section>
      <title>Classes and Class-Like Constructs</title>

      <para></para>
    </section>
  </section>
</chapter>
